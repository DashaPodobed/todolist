[{"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/index.tsx":"1","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/TodolistsList.tsx":"2","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/Todolist/Task/Task.tsx":"3","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/login/login.tsx":"4","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/app/App.tsx":"5","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/components/EditableSpan/EditableSpan.tsx":"6","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/Todolist/Todolist.tsx":"7","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/api/todolists-api.ts":"8","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/login/authReducer.ts":"9","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/app/app-reducer.ts":"10","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/components/AddItemForm/AddItemForm.tsx":"11","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/app/store.ts":"12","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/todolists-reducer.ts":"13","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/tasks-reducer.ts":"14","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/utils/error-utils.ts":"15","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/components/ErrorSnackbar/ErrorSnackbar.tsx":"16"},{"size":745,"mtime":1623945329883,"results":"17","hashOfConfig":"18"},{"size":4032,"mtime":1627390577011,"results":"19","hashOfConfig":"18"},{"size":1773,"mtime":1596295538000,"results":"20","hashOfConfig":"18"},{"size":4010,"mtime":1631545051493,"results":"21","hashOfConfig":"18"},{"size":2425,"mtime":1631620946626,"results":"22","hashOfConfig":"18"},{"size":952,"mtime":1594154724000,"results":"23","hashOfConfig":"18"},{"size":4193,"mtime":1596715250000,"results":"24","hashOfConfig":"18"},{"size":3287,"mtime":1623959523325,"results":"25","hashOfConfig":"18"},{"size":1777,"mtime":1627382073416,"results":"26","hashOfConfig":"18"},{"size":1431,"mtime":1627382294649,"results":"27","hashOfConfig":"18"},{"size":1595,"mtime":1596715562000,"results":"28","hashOfConfig":"18"},{"size":939,"mtime":1627377835856,"results":"29","hashOfConfig":"18"},{"size":3992,"mtime":1631620901520,"results":"30","hashOfConfig":"18"},{"size":5174,"mtime":1627460037371,"results":"31","hashOfConfig":"18"},{"size":858,"mtime":1627382679544,"results":"32","hashOfConfig":"18"},{"size":1101,"mtime":1627382711809,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fzkoqq",{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/index.tsx",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/TodolistsList.tsx",["72","73","74","75","76","77","78","79"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n",["80","81"],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/Todolist/Task/Task.tsx",["82","83","84"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/login/login.tsx",["85"],"//https://www.youtube.com/watch?v=6VmVYi9yrAA\nimport React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./authReducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Must be 3 characters or more';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn){\n        return <Redirect to={'/'}/>\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered \n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}>here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField\n                            // name=\"email\"\n                            // onChange={formik.handleChange}\n                            // value={formik.values.email}\n                            label=\"Email\"\n                            margin=\"normal\"\n                            // onBlur={formik.handleBlur}\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n                        <TextField\n                            // name=\"password\"\n                            // onChange={formik.handleChange}\n                            // value={formik.values.password}\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            // onBlur={formik.handleBlur}\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            // name=\"rememberMe\"\n                            // onChange={formik.handleChange}\n                            // checked={formik.values.rememberMe}\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </form>\n\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n",["86","87"],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/app/App.tsx",["88","89","90"],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/components/EditableSpan/EditableSpan.tsx",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/Todolist/Todolist.tsx",["91","92","93","94","95","96"],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/api/todolists-api.ts",["97"],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/login/authReducer.ts",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/app/app-reducer.ts",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/components/AddItemForm/AddItemForm.tsx",["98","99","100"],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/app/store.ts",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/todolists-reducer.ts",["101"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {initializeAppTC, RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType =\r\n    TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{todolistId: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if(index > -1){\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n           return  action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({todolistId: todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;","/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/features/TodolistsList/tasks-reducer.ts",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/utils/error-utils.ts",[],"/Users/daramakarcik/Desktop/it-kamasutra/todolist-16/src/components/ErrorSnackbar/ErrorSnackbar.tsx",[],{"ruleId":"102","severity":1,"message":"103","line":36,"column":8,"nodeType":"104","endLine":36,"endColumn":10,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":41,"column":8,"nodeType":"104","endLine":41,"endColumn":10,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"106","line":46,"column":8,"nodeType":"104","endLine":46,"endColumn":10,"suggestions":"108"},{"ruleId":"102","severity":1,"message":"106","line":51,"column":8,"nodeType":"104","endLine":51,"endColumn":10,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"106","line":56,"column":8,"nodeType":"104","endLine":56,"endColumn":10,"suggestions":"110"},{"ruleId":"102","severity":1,"message":"106","line":61,"column":8,"nodeType":"104","endLine":61,"endColumn":10,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"106","line":66,"column":8,"nodeType":"104","endLine":66,"endColumn":10,"suggestions":"112"},{"ruleId":"102","severity":1,"message":"106","line":71,"column":8,"nodeType":"104","endLine":71,"endColumn":10,"suggestions":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"102","severity":1,"message":"118","line":15,"column":97,"nodeType":"104","endLine":15,"endColumn":130,"suggestions":"119"},{"ruleId":"102","severity":1,"message":"118","line":20,"column":8,"nodeType":"104","endLine":20,"endColumn":41,"suggestions":"120"},{"ruleId":"102","severity":1,"message":"118","line":24,"column":8,"nodeType":"104","endLine":24,"endColumn":41,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":57,"column":28,"nodeType":"124","endLine":57,"endColumn":45},{"ruleId":"114","replacedBy":"125"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":11,"column":5,"nodeType":"129","messageId":"130","endLine":11,"endColumn":15},{"ruleId":"127","severity":1,"message":"131","line":13,"column":9,"nodeType":"129","messageId":"130","endLine":13,"endColumn":13},{"ruleId":"102","severity":1,"message":"132","line":36,"column":8,"nodeType":"104","endLine":36,"endColumn":10,"suggestions":"133"},{"ruleId":"102","severity":1,"message":"134","line":35,"column":8,"nodeType":"104","endLine":35,"endColumn":10,"suggestions":"135"},{"ruleId":"102","severity":1,"message":"118","line":39,"column":8,"nodeType":"104","endLine":39,"endColumn":42,"suggestions":"136"},{"ruleId":"102","severity":1,"message":"118","line":46,"column":8,"nodeType":"104","endLine":46,"endColumn":54,"suggestions":"137"},{"ruleId":"102","severity":1,"message":"118","line":48,"column":95,"nodeType":"104","endLine":48,"endColumn":134,"suggestions":"138"},{"ruleId":"102","severity":1,"message":"118","line":49,"column":101,"nodeType":"104","endLine":49,"endColumn":140,"suggestions":"139"},{"ruleId":"102","severity":1,"message":"118","line":50,"column":107,"nodeType":"104","endLine":50,"endColumn":146,"suggestions":"140"},{"ruleId":"127","severity":1,"message":"141","line":42,"column":6,"nodeType":"129","messageId":"130","endLine":42,"endColumn":7},{"ruleId":"127","severity":1,"message":"142","line":2,"column":9,"nodeType":"129","messageId":"130","endLine":2,"endColumn":12},{"ruleId":"127","severity":1,"message":"143","line":2,"column":14,"nodeType":"129","messageId":"130","endLine":2,"endColumn":20},{"ruleId":"127","severity":1,"message":"144","line":2,"column":22,"nodeType":"129","messageId":"130","endLine":2,"endColumn":33},{"ruleId":"127","severity":1,"message":"145","line":3,"column":9,"nodeType":"129","messageId":"130","endLine":3,"endColumn":24},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["146"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["147"],["148"],["149"],["150"],["151"],["152"],["153"],"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["156"],["157"],["158"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["154"],["155"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["160"],["161"],["162"],["163"],["164"],["165"],"'a' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'initializeAppTC' is defined but never used.",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},{"desc":"168","fix":"171"},{"desc":"168","fix":"172"},{"desc":"168","fix":"173"},{"desc":"168","fix":"174"},{"desc":"168","fix":"175"},"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"176","fix":"178"},{"desc":"176","fix":"179"},{"desc":"168","fix":"180"},{"desc":"181","fix":"182"},{"desc":"176","fix":"183"},{"desc":"176","fix":"184"},{"desc":"176","fix":"185"},{"desc":"176","fix":"186"},{"desc":"176","fix":"187"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"188","text":"189"},"Update the dependencies array to be: [dispatch]",{"range":"190","text":"191"},{"range":"192","text":"191"},{"range":"193","text":"191"},{"range":"194","text":"191"},{"range":"195","text":"191"},{"range":"196","text":"191"},{"range":"197","text":"191"},"Update the dependencies array to be: [props]",{"range":"198","text":"199"},{"range":"200","text":"199"},{"range":"201","text":"199"},{"range":"202","text":"191"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"203","text":"204"},{"range":"205","text":"199"},{"range":"206","text":"199"},{"range":"207","text":"199"},{"range":"208","text":"199"},{"range":"209","text":"199"},[1316,1318],"[demo, dispatch, isLoggedIn]",[1487,1489],"[dispatch]",[1658,1660],[1863,1865],[2076,2078],[2291,2293],[2438,2440],[2617,2619],[765,798],"[props]",[1071,1104],[1261,1294],[1240,1242],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320]]